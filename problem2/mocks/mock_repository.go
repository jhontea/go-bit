// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogCallerRepository is a mock of LogCallerRepository interface.
type MockLogCallerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogCallerRepositoryMockRecorder
}

// MockLogCallerRepositoryMockRecorder is the mock recorder for MockLogCallerRepository.
type MockLogCallerRepositoryMockRecorder struct {
	mock *MockLogCallerRepository
}

// NewMockLogCallerRepository creates a new mock instance.
func NewMockLogCallerRepository(ctrl *gomock.Controller) *MockLogCallerRepository {
	mock := &MockLogCallerRepository{ctrl: ctrl}
	mock.recorder = &MockLogCallerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogCallerRepository) EXPECT() *MockLogCallerRepositoryMockRecorder {
	return m.recorder
}

// StoreLogCaller mocks base method.
func (m *MockLogCallerRepository) StoreLogCaller(ctx context.Context, url string, response *http.Response) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StoreLogCaller", ctx, url, response)
}

// StoreLogCaller indicates an expected call of StoreLogCaller.
func (mr *MockLogCallerRepositoryMockRecorder) StoreLogCaller(ctx, url, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLogCaller", reflect.TypeOf((*MockLogCallerRepository)(nil).StoreLogCaller), ctx, url, response)
}
